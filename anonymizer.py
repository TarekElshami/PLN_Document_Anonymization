import requests
import xml.etree.ElementTree as ET
import os
import tiktoken

# Mapeo de etiquetas espec√≠ficas a categor√≠as generales
TAG_CATEGORIES = {
    # NAME (Nombre)
    'NOMBRE_SUJETO_ASISTENCIA': 'NAME',
    'NOMBRE_PERSONAL_SANITARIO': 'NAME',

    # PROFESSION (Profesi√≥n)
    'PROFESION': 'PROFESSION',
    'PROFESSION': 'PROFESSION',

    # LOCATION (Ubicaci√≥n)
    'HOSPITAL': 'LOCATION',
    'INSTITUCION': 'LOCATION',
    'CALLE': 'LOCATION',
    'TERRITORIO': 'LOCATION',
    'PAIS': 'LOCATION',
    'CENTRO_SALUD': 'LOCATION',

    # AGE (Edad)
    'EDAD_SUJETO_ASISTENCIA': 'AGE',

    # DATE (Fechas)
    'FECHAS': 'DATE',

    # CONTACT (Contacto)
    'NUMERO_TELEFONO': 'CONTACT',
    'NUMERO_FAX': 'CONTACT',
    'CORREO_ELECTRONICO': 'CONTACT',
    'URL_WEB': 'CONTACT',

    # ID (Identificadores)
    'ID_ASEGURAMIENTO': 'ID',
    'ID_CONTACTO_ASISTENCIAL': 'ID',
    'NUMERO_BENEF_PLAN_SALUD': 'ID',
    'IDENTIF_VEHICULOS_NRSERIE_PLACAS': 'ID',
    'IDENTIF_DISPOSITIVOS_NRSERIE': 'ID',
    'IDENTIF_BIOMETRICOS': 'ID',
    'ID_SUJETO_ASISTENCIA': 'ID',
    'ID_TITULACION_PERSONAL_SANITARIO': 'ID',
    'ID_EMPLEO_PERSONAL_SANITARIO': 'ID',
    'OTRO_NUMERO_IDENTIF': 'ID',

    # OTHER (Otros)
    'SEXO_SUJETO_ASISTENCIA': 'OTHER',
    'FAMILIARES_SUJETO_ASISTENCIA': 'OTHER',
    'OTROS_SUJETO_ASISTENCIA': 'OTHER',
    'DIREC_PROT_INTERNET': 'OTHER'
}

PROMPT_BASE = """
Tarea:
Dado un texto clinico, anota todas las entidades sensibles de acuerdo con las categor√≠as definidas en la gu√≠a oficial de anotaci√≥n de informaci√≥n de salud protegida.

Objetivos
1. Identificar menciones expl√≠citas de informaci√≥n sensible (ISP) contenidas en un texto m√©dico.
2. Etiquetar dichas menciones utilizando tags personalizados con la forma:
<<<ETIQUETA>>>texto<<</ETIQUETA>>>
3. Extraer las entidades anotadas junto con su categor√≠a.

Etiquetas a utilizar
Estas etiquetas corresponden a las definiciones oficiales del plan de anotaci√≥n de informaci√≥n de salud protegida y cubren todas las categor√≠as relevantes:

NOMBRE_SUJETO_ASISTENCIA: Nombre y apellidos del paciente. Incluye iniciales, apodos o motes.  
NOMBRE_PERSONAL_SANITARIO: Nombre y apellidos de m√©dicos, enfermeros, t√©cnicos u otro personal cl√≠nico.  
FAMILIARES_SUJETO_ASISTENCIA: Nombres, apellidos o datos personales de familiares del paciente (edad, parentesco, n√∫mero).  
ID_SUJETO_ASISTENCIA: C√≥digos como NHC, CIPA, DNI, NIF, pasaporte u otros identificadores del paciente.  
ID_TITULACI√ìN_PERSONAL_SANITARIO: N√∫mero de colegiado o licencia del profesional sanitario.  
ID_CONTACTO_ASISTENCIAL: Identificador de episodios cl√≠nicos o procesos.  
ID_ASEGURAMIENTO: N√∫mero de afiliaci√≥n a la seguridad social (NASS).  
EDAD_SUJETO_ASISTENCIA: Edad del paciente (incluyendo formas como "tres d√≠as", "6 a√±os").  
SEXO_SUJETO_ASISTENCIA: Sexo del paciente (incluyendo formas como "var√≥n", "ni√±a", "M", "H").  
FECHAS: Cualquier fecha del calendario (de nacimiento, ingreso, evoluci√≥n, etc.).  
CALLE: Direcci√≥n postal completa, incluyendo tipo de v√≠a, nombre, n√∫mero, piso, etc.  
TERRITORIO: Ciudad, provincia, c√≥digo postal, barrio, comarca, o cualquier otra divisi√≥n geogr√°fica.  
PA√çS: Pa√≠s mencionado en el texto.  
CORREO_ELECTR√ìNICO: Cualquier direcci√≥n de correo electr√≥nico.  
N√öMERO_TEL√âFONO: N√∫meros de tel√©fono personales o profesionales.  
N√öMERO_FAX: N√∫meros de fax asociados a la atenci√≥n o el paciente.  
DIREC_PROT_INTERNET: Direcciones de protocolo de Internet (IP, TCP, SMTP, etc.).  
URL_WEB: Cualquier direcci√≥n web o enlace.  
PROFESI√ìN: Profesi√≥n del paciente o familiares.  
HOSPITAL: Nombres de hospitales o centros sanitarios.  
ID_CENTRO DE SALUD: Nombres de centros de salud o unidades cl√≠nicas.  
INSTITUCI√ìN: Cualquier otra instituci√≥n no m√©dica identificable.  
NUMERO_IDENTIF: Otros n√∫meros de identificaci√≥n no clasificados.  
IDENTIF_VEH√çCULOS_NRSERIE_PLACAS: Matr√≠culas o n√∫meros de bastidor de veh√≠culos.  
IDENTIF_DISPOSITIVOS_NRSERIE: Identificadores de dispositivos m√©dicos (serie, chip, etc.).  
IDENTIF_BIOM√âTRICOS: Huellas, escaneos o cualquier identificador biom√©trico.  
OTROS_SUJETO_ASISTENCIA: Cualquier informaci√≥n adicional que pueda permitir la identificaci√≥n del paciente y no est√© incluida en las categor√≠as anteriores.

üßæ Reglas de anotaci√≥n estrictas
1. No anotar etiquetas o claves del formulario (como "Nombre:", "Edad:", etc.).
2. No incluir espacios ni signos de puntuaci√≥n dentro de las etiquetas.
3. Una etiqueta por entidad, aunque se repita en el texto.
4. Etiquetar m√∫ltiples palabras como una sola menci√≥n si pertenecen a la misma categor√≠a.
5. Excluir t√≠tulos o prefijos como "Dr.", "D√±a." de las etiquetas de nombres.
6. Anotar todas las fechas, edades, lugares y contactos que puedan identificar al paciente o profesional.
7. Si no se encuentra una entidad entonces no debes incluirla

üß™ Entrada esperada
Cualquier texto cl√≠nico en formato libre.

‚úÖ Salida esperada
Devuelve la salida en un **diccionario JSON v√°lido de Python** en una variable llamada annoresult con las siguientes dos claves:

{{
  "texto_anotado": "Texto cl√≠nico con etiquetas <<<ETIQUETA>>>...<</ETIQUETA>>> ya insertadas",
  "entidades": {{
    "ETIQUETA1": ["valor1", "valor2", ...],
    "ETIQUETA2": ["valor1", ...]
  }}
}}

El texto que debes analizar es este:
 "{texto_clinico}"
"""

MODEL_NAME = "llama3.2:1B"

# Diccionario de l√≠mites de contexto por modelo
MODEL_CONTEXT_LIMITS = {
    "llama3.2:1B": 2048,
    "llama3.3": 2048
}

SAFETY_MARGIN = 0.15  # 15% de margen de seguridad


def check_token_limit(prompt):
    """
    Cuenta tokens con margen de seguridad y muestra m√©tricas detalladas.
    Devuelve True si est√° dentro del l√≠mite seguro.
    """
    encoding = tiktoken.get_encoding("cl100k_base")
    tokens = encoding.encode(prompt)
    total_tokens = len(tokens)
    max_tokens = MODEL_CONTEXT_LIMITS.get(MODEL_NAME, 0)

    # Aplicamos margen de seguridad (15%)
    safe_max_tokens = int(max_tokens * (1 - SAFETY_MARGIN))

    # Informe detallado
    print("\n" + "‚ïê" * 50)
    print(f"‚ö° Modelo: {MODEL_NAME}")
    print(f"  ‚ñ∫ L√≠mite real del modelo: {max_tokens} tokens")
    print(f"  ‚ñ∫ L√≠mite seguro ({SAFETY_MARGIN * 100}% margen): {safe_max_tokens} tokens")
    print(f"  ‚ñ∫ Tama√±o real del prompt: {total_tokens} tokens")
    print(f"  ‚ñ∫ Uso del l√≠mite real: {total_tokens / max_tokens * 100:.1f}%")
    print("‚ïê" * 50)

    if total_tokens > max_tokens:
        print("‚ùå ¬°PELIGRO! Has SUPERADO el L√çMITE REAL del modelo".center(50))
        print("  El prompt ser√° truncado y puede fallar".center(50))
        return False
    elif total_tokens > safe_max_tokens:
        print("‚ö†Ô∏è ¬°Atenci√≥n! Has superado el L√çMITE SEGURO".center(50))
        print("  El prompt funcionar√° pero podr√≠as tener resultados inesperados".center(50))
        return False
    else:
        print("‚úÖ Dentro del l√≠mite seguro".center(50))
        return True


def extract_entities(text):
    """
    Usa el modelo LLM para:
    1. Marcar entidades en el texto con tags <<<TAG>>>
    2. Devolver las entidades en formato clave-valor
    """

    url = "http://localhost:20201/api/generate"
    payload = {
        "model": MODEL_NAME,
        "prompt": PROMPT_BASE.format(texto_clinico=text),
        "stream": False
    }
    headers = {"Content-Type": "application/json"}

    # Guardar el prompt generado para referencia
    with open("prompt.txt", "w", encoding="utf-8") as f:
        f.write(payload["prompt"])

    check_token_limit(payload["prompt"])

    try:
        response = requests.post(url, json=payload, headers=headers, timeout=1000)
        response.raise_for_status()

        llm_output = response.json()['response']
        print("Respuesta del LLM:\n", llm_output)

        return {
            'tagged_text': llm_output,
            'entities': {}
        }

    except requests.exceptions.RequestException as e:
        print(f"Error al conectar con el servidor: {e}")
        return {
            'tagged_text': text,
            'entities': {}
        }


def process_xml_files(input_dir, output_dir):
    """Procesa archivos XML manteniendo ambas salidas."""
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    for filename in [f for f in os.listdir(input_dir) if f.endswith('.xml')]:
        try:
            input_path = os.path.join(input_dir, filename)
            output_path = os.path.join(output_dir, filename)

            print(f"\nProcesando archivo: {filename}")

            # Leer XML original
            tree = ET.parse(input_path)
            original_text = tree.find('.//TEXT').text or ""

            # Extraer datos (texto marcado + entidades)
            result = extract_entities(original_text)

            # Mostrar resultados en consola
            print("Texto marcado:\n", result['tagged_text'])

            # Guardar el resultado en un nuevo XML (simplificado)
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(result['tagged_text'])

            print(f"\nResultado guardado en: {output_path}")
            print("*" * 80)

        except Exception as e:
            print(f"Error procesando {filename}: {str(e)}")


if __name__ == "__main__":
    process_xml_files('test/xml', 'output/xml/quantized_LLaMA_model3.2-1B')